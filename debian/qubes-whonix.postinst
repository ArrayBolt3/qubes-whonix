#!/bin/bash
# vim: set ts=4 sw=4 sts=4 et :

## This file is part of Whonix
## -- and --
## The Qubes OS Project, http://www.qubes-os.org
##
## Copyright (C) 2014  Jason Mehring <nrgaway@gmail.com>
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.
##
## postinst script for qubes-whonix

# see: dh_installdeb(1)
#
# The postint script may be called in the following ways:
#   * <postinst> 'configure' <most-recently-configured-version>
#   * <old-postinst> 'abort-upgrade' <new version>
#   * <conflictor's-postinst> 'abort-remove' 'in-favour' <package>
#     <new-version>
#   * <postinst> 'abort-remove'
#   * <deconfigured's-postinst> 'abort-deconfigure' 'in-favour'
#     <failed-install-package> <version> 'removing'
#     <conflicting-package> <version>
#
#    For details, see http://www.debian.org/doc/debian-policy/ or
# https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html or
# the debian-policy package

# Directory that modified desktop entry config files are stored in
XDG_CONFIG_QUBES="/usr/share/qubes/xdg"

setArrayAsGlobal() {
    local array="$1"
    local export_as="$2"
    local code=$(declare -p "$array")
    local replaced="${code/$array/$export_as}"
    eval ${replaced/declare -/declare -g}
}

systemdInfo() {
    unit=${1}
    return_global_var=${2}

    declare -A INFO=()
    while read line; do
        INFO[${line%%=*}]="${line##*=}"
    done < <(systemctl show ${unit} 2> /dev/null)

    setArrayAsGlobal INFO $return_global_var
    return ${#INFO[@]}
}

displayFailedStatus() {
    action=${1}
    unit=${2}

    # Only display if there are results.  In chroot environment there will be
    # no results to 'systemctl show' command
    systemdInfo ${unit} info || {
        echo
        echo "==================================================="
        echo "FAILED: systemd ${action} ${unit}"
        echo "==================================================="
        echo "    LoadState = ${info[LoadState]}"
        echo "    LoadError = ${info[LoadError]}"
        echo "  ActiveState = ${info[ActiveState]}"
        echo "     SubState = ${info[SubState]}"
        echo "UnitFileState = ${info[UnitFileState]}"
        echo
    }
}

# Disable systemd units
disableSystemdUnits() {
    for unit in $*; do
        systemctl is-enabled ${unit} > /dev/null 2>&1 && {
            echo "Disabling ${unit}..."
            systemctl is-active ${unit} > /dev/null 2>&1 && {
                systemctl stop ${unit} > /dev/null 2>&1 || displayFailedStatus stop ${unit}
            }
            if [ -f /lib/systemd/system/${unit} ]; then
                if fgrep -q '[Install]' /lib/systemd/system/${unit}; then
                    systemctl disable ${unit} > /dev/null 2>&1 || displayFailedStatus disable ${unit}
                else
                    # Forcibly disable
                    echo "Forcibly disabling: ${unit}"
                    ln -sf /dev/null /etc/systemd/system/${unit}
                fi
            else
                    systemctl disable ${unit} > /dev/null 2>&1 || displayFailedStatus disable ${unit}
            fi
        } || {
            echo "It appears ${unit} is already disabled!"
        }
    done
}

# Enable systemd units
enableSystemdUnits() {
    for unit in $*; do
        systemctl is-enabled ${unit} > /dev/null 2>&1 && {
            echo "It appears ${unit} is already enabled!"
        } || {
            echo "Enabling: ${unit}..."
            systemctl enable ${unit} > /dev/null 2>&1 && {
                systemctl start ${unit} > /dev/null 2>&1 || displayFailedStatus start ${unit}
            } || {
                echo "Could not enable: ${unit}"
                displayFailedStatus enable ${unit}
            }
        }
    done
}

setPermissions() {
    local owner="${1}"
    local group="${2}"
    local mode="${3}"
    local file="${4}"

    chmod ${mode} "${file}"
    chown ${owner}:${group} "${file}"
}

remove_ShowIn() {
    if [ -e "${1}" ]; then
        sed -i '/^\(Not\|Only\)ShowIn/d' "${1}"
    fi
}

showIn() {
    desktop_entry="${1}"
    shown_in="${2}"
    message="${shown_in:-"Shown in All;"}"
    desktop_entry_qubes="${XDG_CONFIG_QUBES}/autostart/${desktop_entry##*/}"

    # Make sure Qubes autostart directory exists
    mkdir -p "${XDG_CONFIG_QUBES}/autostart"

    # Desktop entry exists, so move to Qubes directory and modify it
    if [ -e "${desktop_entry}" ]; then
        echo "Desktop Entry Modification - ${message} ${desktop_entry##*/}..."
        cp -pf "${desktop_entry}" "${desktop_entry_qubes}"

        remove_ShowIn "${desktop_entry_qubes}"
        sed -i '/^X-GNOME-Autostart-enabled.*[fF0]/d' "${desktop_entry_qubes}"

        # Will only be '' if shown in all
        if [ ! "${shown_in}x" == "x" ]; then
            echo "${shown_in}" >> "${desktop_entry_qubes}" || true
        fi

    # Desktop entry must have been removed, so also remove from Qubes directory
    else
        echo "Desktop Entry Modification - Remove: ${desktop_entry##*/}..."
        rm -f "${desktop_entry_qubes}"
    fi
}


case "${1}" in
    configure)
        # Use gdialog as an alternative for dialog
        if [ ! -L "/usr/bin/dialog" ]; then
            mv -f /usr/bin/dialog /usr/bin/dialog.dist
            update-alternatives --force --install /usr/bin/dialog dialog /usr/bin/gdialog 100
        fi

        # Fake that initializer was already run
        mkdir -p /root/.whonix
        touch /root/.whonix/first_run_initializer.done

        # prevent first-use notice:
        mkdir -p /home/user/.gateway
        touch /home/user/.gateway/first_use_check.done

        # Prevent whonixcheck error
        echo 'WHONIXCHECK_NO_EXIT_ON_UNSUPPORTED_VIRTUALIZER="1"' >> /etc/whonix.d/30_whonixcheck_default

        # Tor will be re-enabled upon initial configuration
        update-rc.d tor disable || true
        update-rc.d sdwdate disable || true

        # Disable unwanted applications
        update-rc.d network-manager disable || true
        update-rc.d spice-vdagent disable || true
        update-rc.d swap-file-creator disable || true
        update-rc.d whonix-initializer disable || true

        # Will not be restarted in chroot which is what is expected
        systemctl restart /usr/lib/qubes-whonix/init/init
        systemctl restart /usr/lib/qubes-whonix/init/qubes-whonix-firewall

        # Modify desktop files not to show in Qubes
        for item in = /etc/xdg/autostart/pulseaudio-kde.desktop \
                      /etc/xdg/autostart/gateway_first_run_notice.desktop \
                      /etc/xdg/autostart/spice-vdagent.desktop \
                      /etc/xdg/autostart/whonixsetup.desktop \
                      /etc/xdg/autostart/whonix-setup-wizard.desktop ; do
            showIn "${item}" 'NotShowIn=QUBES;'
        done

        # Set timezone to UTC and make files immutable
        timezone='UTC'
        cp -p /usr/share/zoneinfo/${timezone} /etc/localtime
        cp -p /usr/share/zoneinfo/${timezone} /etc/localtime.anondist
        echo "${timezone}" > /etc/timezone
        echo "${timezone}" > /etc/timezone.anondist
        chattr +i /etc/localtime
        chattr +i /etc/timezone

        ;;

    abort-upgrade|abort-remove|abort-deconfigure)
        exit 0
        ;;

    triggered)
        for trigger in ${2}; do
            case "${trigger}" in

                # Restart firewall
                /usr/bin/whonix_firewall | \
                /usr/share/tor/tor-service-defaults-torrc.anondist)
                    /usr/lib/qubes-whonix/init/init
                    /usr/lib/qubes-whonix/init/qubes-whonix-firewall
                    ;;

                # Reset back to Whonix defaults
                /etc/resolv.conf | \
                /etc/hosts | \
                /etc/hostname)
                    /usr/lib/qubes-whonix/init/init
                    ;;

                # Replace IP addresses
                /usr/lib/leaktest-workstation/simple_ping.py | \
                /usr/lib/whonixcheck/preparation | \
                /usr/share/anon-kde-streamiso/share/config/kioslaverc | \
                /usr/bin/whonix_firewall | \
                /etc/whonix_firewall.d/30_default | \
                /usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh | \
                /usr/bin/uwt | \
                /etc/uwt.d/30_uwt_default | \
                /usr/bin/update-torbrowser | \
                /etc/network/interfaces.whonix | \
                /etc/resolv.conf.anondist | \
                /etc/sdwdate.d/31_anon_dist_stream_isolation_plugin | \
                /etc/rinetd.conf.anondist | \
                /etc/network/interfaces.whonix | \
                /usr/share/anon-torchat/.torchat/torchat.ini)
                    /usr/lib/qubes-whonix/init/replace-ips
                    ;;

                # Desktop Entry Modification - Not shown in Qubes
                /etc/xdg/autostart/pulseaudio-kde.desktop | \
                /etc/xdg/autostart/gateway_first_run_notice.desktop | \
                /etc/xdg/autostart/spice-vdagent.desktop | \
                /etc/xdg/autostart/whonixsetup.desktop | \
                /etc/xdg/autostart/whonix-setup-wizard.desktop)
                    showIn "${trigger}" 'NotShowIn=QUBES;'
                    ;;

                *)
                    echo "postinst called with unknown trigger \`${2}'" >&2
                    exit 1
                    ;;
            esac
        done
        exit 0
        ;;

    *)
        echo "postinst called with unknown argument \`${1}'" >&2
        exit 1
        ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
