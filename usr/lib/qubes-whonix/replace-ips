#!/usr/bin/python3 -su
# -*- coding: utf-8 -*-
# vim: set ts=4 sw=4 sts=4 et :
'''
replace-ips - Search and replace IP addresses in specified files.

All Whonix configuration files provided are searched for the last known occurrence
of an IP address that was used and replaced with the current IP address provided by
Qubes.

Initially, the known IP addresses are 10.152.152.10 and 10.152.152.11 as defaults
in Whonix configuration files. They are also checked each time this module is
run in case the configuration files were modified due to a system update. The
default IPv6 addresses fd19:c33d:88bc::10 and fd19:c33d:88bc::11 are also checked.

Qubes feature request: optional static IP addresses
https://github.com/QubesOS/qubes-issues/issues/1477

Copyright (C) 2014 - 2015 Jason Mehring <nrgaway@gmail.com>
License: GPL-2+
Authors: Jason Mehring

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import os
import sys
import re
import subprocess

WHONIX_IP_GATEWAY = '/var/cache/qubes-whonix/whonix-ip-gateway'
WHONIX_IP6_GATEWAY = '/var/cache/qubes-whonix/whonix-ip6-gateway'
WHONIX_IP_LOCAL = '/var/cache/qubes-whonix/whonix-ip-local'
WHONIX_IP6_LOCAL = '/var/cache/qubes-whonix/whonix-ip6-local'
IP_ADDRESS = re.compile(r'(?:[0-9]{1,3}\.){3}[0-9]{1,3}')
IP6_ADDRESS = re.compile(r'(?:[0-9a-f]{0,4}:){2,7}[0-9a-f]{1,4}', re.IGNORECASE)

# This is a list of all Whonix files that contain IP addresses that will
# be searched and replaced with the currently assigned IP address
FILES=[
    '/usr/share/whonix-gw-network-conf/network_internal_ip.txt',
    '/etc/resolv.conf',
    '/etc/resolv.conf.whonix',
    '/etc/resolv.conf.anondist',
    '/etc/rinetd.conf.anondist',
    '/etc/tor/torrc',
    '/usr/local/etc/torrc.d/50_user.conf',
    '/usr/share/anon-gw-anonymizer-config/torrc.examples',
    '/home/user/.torchat/torchat.ini',
    '/home/user/.xchat2/xchat.conf',
    '/home/user/.config/hexchat/hexchat.conf',
    '/usr/lib/leaktest-workstation/simple_ping.py',
    '/usr/share/anon-apps-config/kioslaverc',
    '/usr/share/anon-torchat/.torchat/torchat.ini',
    '/usr/share/tor/tor-service-defaults-torrc.anondist',
]


def whonix_mode():
    '''Determine Whonix mode.

    Can be either 'gateway', 'workstation', 'template', or 'unknown'.
    '''
    mode = None

    if os.path.exists('/run/qubes/this-is-templatevm'):
        mode = 'template'
    elif os.path.exists('/usr/share/anon-gw-base-files/gateway'):
        mode = 'gateway'
    elif os.path.exists('/usr/share/anon-ws-base-files/workstation'):
        mode = 'workstation'
    else:
        mode = 'unknown'

    return mode


def replace_ip(ips, current_ip, files, ip_file):
    '''Searches and replaces IP addresses in the provided files.

    ips:
        List of IP addresses to replace.

    current_ip:
        IP replacement address.

    files:
        List of files to search. The list must contain full pathnames.

    ip_file:
        Full path to the filename used to store the last known value of the IP address. The
        `current_ip` is stored in this file and used the next time this module
        is executed.
    '''
    replaced = False
    for filename in files:
        if os.path.exists(filename):
            try:
                with open(filename, 'r') as infile:
                    text = infile.read()
            except (IOError):
                print("ERROR: file existing but failed to open for reading: " + filename)
                continue

            match = text
            for last_ip in ips:
                match = re.sub(r'(?m){0}'.
                               format(re.escape(last_ip)),
                               current_ip,
                               match)

                if ':' in last_ip:
                    match = re.sub(r'(?m){0}[:]0'.
                               format(re.escape(last_ip.rsplit(':', 1)[0])),
                               current_ip.rsplit(':', 1)[0] + ':0',
                               match)
                else:
                    match = re.sub(r'(?m){0}[.]0'.
                               format(re.escape(last_ip.rsplit('.', 1)[0])),
                               current_ip.rsplit('.', 1)[0] + '.0',
                               match)

            if text != match:
                try:
                    with open(filename, 'w') as outfile:
                        outfile.write(match)
                    replaced = True
                except (IOError):
                    print("ERROR: file existing but failed to open filename for writing: " + filename)
                    ## Probably better to fail open and try more files.
                    #return False
            else:
                    print("INFO: file unchanged: " + filename)
    if replaced:
        try:
            with open(ip_file, 'w') as outfile:
                outfile.write(current_ip)
            replaced = True
            print("INFO: file updated: " + ip_file)
        except (IOError):
            print("ERROR: writing to ip_file failed: " + ip_file)
            return False

    return replaced


def get_ip_address(filename, default=''):
    '''Retrieve an IP address from a file.

    The last known IP address is saved in a file so it can be referenced and used
    the next time the system is booted to assist in a reliable search and replace.
    '''
    if os.path.exists(filename):
        try:
            with open(filename, 'r') as infile:
                ip_address = infile.read()
            if IP_ADDRESS.match(ip_address) or IP6_ADDRESS.match(ip_address):
                return ip_address.rstrip()
        except (IOError):
            return default
    return default


def maybe_reload_tor():
    '''Reload Tor's configuration files if Tor is currently active and not
    disabled.
    '''
    try:
        if subprocess.check_output(['systemctl', 'is-active', 'tor@default']):
            print("INFO: executing: systemctl restart tor@default")
            # Restarting instead of reloading due to upstream Tor bug
            # https://trac.torproject.org/projects/tor/ticket/16161
            subprocess.call(['systemctl', 'restart', 'tor@default'])
    except (subprocess.CalledProcessError):
        print("INFO: Systemd unit tor@default is not running, therefore not restarting.")
        pass


def main(args):
    ## IP HARDCODED, but this does not matter for Non-Qubes-Whonix. This script is
    ## currently only used in Qubes-Whonix.
    last_ip_gateway = get_ip_address(WHONIX_IP_GATEWAY, '10.152.152.10')
    last_ip6_gateway = get_ip_address(WHONIX_IP6_GATEWAY, 'fd19:c33d:88bc::10')
    last_ip_local = get_ip_address(WHONIX_IP_LOCAL, '10.152.152.11')
    last_ip6_local = get_ip_address(WHONIX_IP6_LOCAL, 'fd19:c33d:88bc::11')
    current_ip_local = None
    current_ip_gateway = None
    current_ip6_local = None
    current_ip6_gateway = None
    chg4 = False
    chg6 = False

    if not os.path.isdir("/var/cache/qubes-whonix"):
        try:
            os.makedirs("/var/cache/qubes-whonix")
        except:
            print("ERROR: could not create folder '/var/cache/qubes-whonix'.")

    if last_ip_gateway:
        if whonix_mode() == 'gateway':
            try:
                current_ip_gateway = subprocess.check_output(['qubesdb-read', '/qubes-netvm-gateway']).decode().rstrip()
            except (OSError, subprocess.CalledProcessError):
                print("WARNING: 'qubesdb-read /qubes-netvm-gateway' failed!")

            try:
                current_ip6_gateway = subprocess.check_output(['qubesdb-read', '/qubes-netvm-gateway6']).decode().rstrip()
            except (OSError, subprocess.CalledProcessError):
                print("WARNING: 'qubesdb-read /qubes-netvm-gateway6' failed!")

            if current_ip_gateway is not None:
                if IP_ADDRESS.match(current_ip_gateway):
                    ips_to_replace = [last_ip_gateway, '10.152.152.10', '10.152.152.11']
                    chg4 = replace_ip(ips_to_replace, current_ip_gateway, FILES, WHONIX_IP_GATEWAY):

            if current_ip6_gateway is not None:
                if IP6_ADDRESS.match(current_ip6_gateway):
                    ips_to_replace = [last_ip6_gateway, 'fd19:c33d:88bc::10', 'fd19:c33d:88bc::11']
                    chg6 = replace_ip(ips_to_replace, current_ip6_gateway, FILES, WHONIX_IP6_GATEWAY):

            if chg4 or chg6:
                maybe_reload_tor()

        if whonix_mode() == 'workstation' and last_ip_local:
            try:
                current_ip_local = subprocess.check_output(['qubesdb-read', '/qubes-ip']).decode().rstrip()
                current_ip_gateway = subprocess.check_output(['qubesdb-read', '/qubes-gateway']).decode().rstrip()
            except (OSError, subprocess.CalledProcessError):
                print("WARNING: 'qubesdb-read /qubes-ip' or 'qubesdb-read /qubes-gateway' failed!")
                #return

            try:
                current_ip6_local = subprocess.check_output(['qubesdb-read', '/qubes-ip6']).decode().rstrip()
                current_ip6_gateway = subprocess.check_output(['qubesdb-read', '/qubes-gateway6']).decode().rstrip()
            except (OSError, subprocess.CalledProcessError):
                print("WARNING: 'qubesdb-read /qubes-ip6' or 'qubesdb-read /qubes-gateway6' failed!")
                #return

            if None not in (current_ip_local, current_ip_gateway):
                if IP_ADDRESS.match(current_ip_local) and IP_ADDRESS.match(current_ip_gateway):
                    ips_to_replace = [last_ip_local, '10.152.152.11']
                    replace_ip(ips_to_replace, current_ip_local, FILES, WHONIX_IP_LOCAL)

                    ips_to_replace = [last_ip_gateway, '10.152.152.10']
                    replace_ip(ips_to_replace, current_ip_gateway, FILES, WHONIX_IP_GATEWAY)

            if None not in (current_ip6_local, current_ip6_gateway):
                if IP6_ADDRESS.match(current_ip6_local) and IP6_ADDRESS.match(current_ip6_gateway):
                    ips_to_replace = [last_ip6_local, 'fd19:c33d:88bc::11']
                    replace_ip(ips_to_replace, current_ip6_local, FILES, WHONIX_IP6_LOCAL)

                    ips_to_replace = [last_ip6_gateway, 'fd19:c33d:88bc::10']
                    replace_ip(ips_to_replace, current_ip6_gateway, FILES, WHONIX_IP6_GATEWAY)


if __name__ == "__main__":
    print("/usr/lib/qubes-whonix/replace-ips INFO: START")
    main(sys.argv[1:])
    print("/usr/lib/qubes-whonix/replace-ips INFO: END")
